name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd
        ports:
          - 1433:1433
        options: >-
          --health-cmd "bash -c '</dev/tcp/localhost/1433'"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 20s

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install xvfb
      run: sudo apt-get install -y xvfb

    - name: Install SQL Server tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
        curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev

    - name: Wait for SQL Server to be ready
      run: |
        for i in {1..30}; do
          if /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -Q "SELECT 1;" &>/dev/null; then
            echo "SQL Server is ready"
            exit 0
          fi
          echo "Waiting for SQL Server to be ready..."
          sleep 2
        done
        echo "Timeout waiting for SQL Server"
        exit 1

    - name: Create test database
      run: |
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -Q "CREATE DATABASE TestDB;"

    - name: Create test user
      run: |
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -Q "
        IF EXISTS (SELECT * FROM sys.server_principals WHERE name = 'testuser')
            DROP LOGIN testuser;
        CREATE LOGIN testuser WITH PASSWORD = 'Test@Password123', CHECK_POLICY = OFF;
        USE TestDB;
        CREATE USER testuser FOR LOGIN testuser;
        ALTER ROLE db_owner ADD MEMBER testuser;"

    - name: Create test table and insert data
      run: |
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong@Passw0rd' -C -d TestDB -Q "CREATE TABLE TestTable (Id INT); INSERT INTO TestTable VALUES (1), (2);"

    - name: Run tests
      run: xvfb-run -a npm test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: junit.xml

    - name: Cleanup
      if: always()
      run: docker rm -f sql1 